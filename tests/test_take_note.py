import pytest
from simple_note_taker.src.domain.note import Note
from simple_note_taker.tests.helpers.spy_editor import Editor
import filecmp
import os
from simple_note_taker.src.note_taker.create_note import NoteTaker, DuplicatedNoteError

# TODO: Implementar repository o capa de persistencia para create_note
# TODO: Si almaceno la nota en proceso como una lista de lineas entonces puedo testear mejor y modularizar mas el codigo


notes_path = os.getcwd()+"/tests/notes/"
notes_templ = os.getcwd()+"/tests/template_demo.md"
#eliminar duplicacion de fixture entre testeos
@pytest.fixture(autouse=True)
def remove_test_notes():
    if os.path.isdir(notes_path):
        os.system("rm -rf "+notes_path)
    os.mkdir(notes_path)
    yield
    os.system("rm -rf "+notes_path)

def test_note_taker_should_exist_by_the_note_folder_paths_and_a_template_path():
    nt = NoteTaker(notes_path, notes_templ)
    assert nt.notes_path() == notes_path
    assert nt.notes_templ() == notes_templ

@pytest.mark.integration
def test_note_taker_should_create_a_note_from_a_string_in_path_with_backslash():
    nt = NoteTaker(notes_path, notes_templ)
    note_name = "this is an empty test note"
    nt.create_note(note_name)
    note_name_parsed = note_name.replace(" ", "_")+".md"
    assert os.path.isfile(notes_path+note_name_parsed)

# FIX: This brokes down because of metadata, how can i test it in a better way
#@pytest.mark.integration
#def test_note_taker_should_get_note_template_from_path():
#    nt = NoteTaker(os.getcwd()+"/tests/",os.getcwd()+"/tests/template_demo.md")
#    note_name = "generated by template"
#    nt.create_note(note_name)
#    assert filecmp.cmp(os.getcwd()+"/tests/generated_by_template.md",os.getcwd()+"/tests/template_demo.md")


@pytest.mark.integration
def test_note_taker_should_allow_set_tags_from_note_name_using_middle_dash():
    nt = NoteTaker(notes_path,notes_templ)
    note_name = "note with tags -this_is_a_tag"
    nt.create_note(note_name)
    with open(notes_path+"note_with_tags.md",mode='r') as f:
        last_line = f.readlines()[len(f.readlines())-1]
        assert last_line=="#this_is_a_tag"
    
# Infra should instantiate editor
@pytest.mark.integration
def test_note_taker_should_open_editor_for_edit_note():
    editor = Editor()
    nt = NoteTaker(notes_path,notes_templ)
    nt.set_editor(editor)
    note_name = "edited note with my editor -this_is_great"
    nt.create_note(note_name)
    assert editor.was_called 
 
def test_note_taker_should_generate_a_unique_id_for_note():
    """Genera IDS basados en el contenido"""    
    nt = NoteTaker(notes_path,notes_templ)
    note_name = "note with id -i_have_id"
    nt.create_note("note with id -i_have_id")
    id1= nt.id()
    nt.create_note("another note with different id -i_have_id")
    id2=nt.id()
    assert id1 != id2

#        assert lines[0]=="# note with header"
#        assert lines[1]=="- ID:"
#        assert lines[2]=="- DATE: "+time()
#        assert lines[3]=="- FILENAME: "+os.getcwd()+"/tests/note_with_header.md"
@pytest.mark.integration    
def test_note_taker_should_print_note_name_as_a_header_in_first_line____():
    nt = NoteTaker(notes_path,notes_templ)
    note_name = "note with id -i_have_id"
    nt.create_note("note with title -i_have_title")
    with open(notes_path+"note_with_title.md") as f:
        assert f.readlines()[0] == "# note with title\n"


@pytest.mark.integration    
def test_note_taker_should_print_note_id_as_second_line():
    nt = NoteTaker(notes_path,notes_templ)
    note_name = "note with id impressed -i_have_id"
    nt.create_note(note_name)
    with open(notes_path+"note_with_id_impressed.md") as f:
        assert f.readlines()[1].startswith("- ID:")


class InMemoRepo():

    def __init__(self):
        self._all = list()

    def save(self,note_dto):
        self._all.append(note_dto)

    def get_all(self):
        return self._all

def test_note_should_never_be_repitted():
    in_memo_repo = InMemoRepo()
    nt = NoteTaker(notes_path,notes_templ).set_repo(in_memo_repo)
    with pytest.raises(DuplicatedNoteError):
        nt.create_note("")
        nt.create_note("")
        assert len(in_memo_repo.get_all()) == 1

#TODO: define NoteDTO for persistence and use it in service note taker
#TODO: desacouple note taker of note modification
