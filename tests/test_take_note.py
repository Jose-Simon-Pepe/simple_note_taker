import pytest
from simple_note_taker.tests.helpers.spy_editor import Editor
import filecmp
import os
from simple_note_taker.src.note_taker.create_note import NoteTaker

# TODO: Implementar repository o capa de persistencia para create_note
# TODO: Si almaceno la nota en proceso como una lista de lineas entonces puedo testear mejor y modularizar mas el codigo

notes_path = "/home/peace/notes/"
notes_templ = os.getcwd()+"/tests/template_demo.md"

def test_note_taker_should_exist_by_the_note_folder_paths_and_a_template_path():
    nt = NoteTaker(notes_path, notes_templ)
    assert nt.notes_path() == notes_path
    assert nt.notes_templ() == notes_templ

@pytest.mark.integration
def test_note_taker_should_create_a_note_from_a_string_in_path_with_backslash():
    nt = NoteTaker(notes_path, notes_templ)
    note_name = "this is an empty test note"
    nt.create_note(note_name)
    note_name_parsed = note_name.replace(" ", "_")+".md"
    assert os.path.isfile(notes_path+note_name_parsed)

@pytest.mark.integration
def test_note_taker_should_get_note_template_from_path():
    nt = NoteTaker(os.getcwd()+"/tests/",os.getcwd()+"/tests/template_demo.md")
    note_name = "generated by template"
    nt.create_note(note_name)
    assert filecmp.cmp(os.getcwd()+"/tests/generated_by_template.md",os.getcwd()+"/tests/template_demo.md")


@pytest.mark.integration
def test_note_taker_should_allow_set_tags_from_note_name_using_middle_dash():
    nt = NoteTaker(os.getcwd()+"/tests/",os.getcwd()+"/tests/template_demo.md")
    note_name = "note with tags -this_is_a_tag"
    nt.create_note(note_name)
    with open(os.getcwd()+"/tests/note_with_tags.md",mode='r') as f:
        last_line = f.readlines()[len(f.readlines())-1]
        assert last_line=="#this_is_a_tag"
    
# Infra should instantiate editor
@pytest.mark.integration
def test_note_taker_should_open_editor_for_edit_note():
    editor = Editor()
    nt = NoteTaker(os.getcwd()+"/tests/",os.getcwd()+"/tests/template_demo.md")
    nt.set_editor(editor)
    note_name = "edited note with my editor -this_is_great"
    nt.create_note(note_name)
    assert editor.was_called 
 
def test_note_taker_should_generate_a_unique_id_for_note():
    """Genera IDS basados en el contenido"""    
    nt = NoteTaker(os.getcwd()+"/tests/",os.getcwd()+"/tests/template_demo.md")
    note_name = "note with id -i_have_id"
    nt.create_note("note with id -i_have_id")
    id1= nt.id()
    nt.create_note("another note with different id -i_have_id")
    id2=nt.id()
    assert id1 != id2

#@pytest.mark.integration
#def test_note_taker_should_print_metadata_as_note_header():
#    nt = NoteTaker(os.getcwd()+"/tests/",os.getcwd()+"/tests/template_demo.md")
#    note_name = "note with header -i_have_a_header"
#    nt.create_note(note_name).title().id().date().filename()
#    with open(os.getcwd()+"/tests/note_with_header.md",mode='r') as f:
#        ## assertar que los primeros tres lienas sean el titulo el id la fecha y el filename
#        lines = f.readlines()
#        assert lines[0]=="# note with header"
#        assert lines[1]=="- ID:"
#        assert lines[2]=="- DATE: "+time()
#        assert lines[3]=="- FILENAME: "+os.getcwd()+"/tests/note_with_header.md"
    
    
